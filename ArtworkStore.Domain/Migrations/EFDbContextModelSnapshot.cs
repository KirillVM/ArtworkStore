// <auto-generated />
using System;
using ArtworkStore.Domain.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ArtworkStore.Domain.Migrations
{
    [DbContext(typeof(EFDbContext))]
    partial class EFDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ArtworkStore.Domain.Entities.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasColumnType("integer");

                    b.Property<long>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("descriprion")
                        .HasColumnType("text");

                    b.Property<string>("Format")
                        .HasColumnName("format")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.Property<string>("Technique")
                        .HasColumnName("technique")
                        .HasColumnType("text");

                    b.Property<Guid>("TransportId")
                        .HasColumnName("transport_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("artworks");
                });

            modelBuilder.Entity("ArtworkStore.Domain.Entities.ArtworkPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArtworkId")
                        .HasColumnName("artwork_id")
                        .HasColumnType("integer");

                    b.Property<Guid>("TransportId")
                        .HasColumnName("transport_id")
                        .HasColumnType("uuid");

                    b.Property<string>("URL")
                        .HasColumnName("url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("artwork_photo");
                });

            modelBuilder.Entity("ArtworkStore.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Age")
                        .HasColumnName("age")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastNAme")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<Guid>("TransportId")
                        .HasColumnName("transport_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("author");
                });

            modelBuilder.Entity("ArtworkStore.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("cart");
                });

            modelBuilder.Entity("ArtworkStore.Domain.Entities.CartArtwork", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnName("cart_id")
                        .HasColumnType("integer");

                    b.Property<int>("ArtworkId")
                        .HasColumnName("artwork_id")
                        .HasColumnType("integer");

                    b.HasKey("CartId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("cart_artwork");
                });

            modelBuilder.Entity("ArtworkStore.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Age")
                        .HasColumnName("age")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<Guid>("TransportId")
                        .HasColumnName("transport_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("ArtworkStore.Domain.Entities.Artwork", b =>
                {
                    b.HasOne("ArtworkStore.Domain.Entities.Author", "Author")
                        .WithMany("Artworks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtworkStore.Domain.Entities.ArtworkPhoto", b =>
                {
                    b.HasOne("ArtworkStore.Domain.Entities.Artwork", "Artwork")
                        .WithMany("ArtworkPhotos")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtworkStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ArtworkStore.Domain.Entities.User", null)
                        .WithOne("Cart")
                        .HasForeignKey("ArtworkStore.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtworkStore.Domain.Entities.CartArtwork", b =>
                {
                    b.HasOne("ArtworkStore.Domain.Entities.Artwork", "Artwork")
                        .WithMany("CartArtworks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtworkStore.Domain.Entities.Cart", "Cart")
                        .WithMany("CartArtworks")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
